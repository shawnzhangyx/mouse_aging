#! /usr/bin/env bash
## Snakefile
####################

import pandas as pd
workdir: workflow.basedir + "/../../analysis/snapATAC/"

sample_info = pd.read_table("../../scripts/read_to_matrix/read2matrix.sample_info.txt",sep=" ")
tissues_dict = {}
for x in sample_info.index:
  if sample_info.loc[x]["tissue"] not in tissues_dict:
    tissues_dict[sample_info.loc[x]["tissue"]] = [x]
  else:
    tissues_dict[sample_info.loc[x]["tissue"]].append(x)
print(tissues_dict)


localrules: create_snap_list



rule require_snap_pre:
  input: 
    expand("{tissue}/snapFiles/{tissue}.snap.list",tissue=tissues_dict.keys())
#    expand("{tissue}/snapFiles/{tissue}.snap.list",tissue=["DH"])


####### merge snap files from the same tissue. 
#rule merge_snapF_tissue:
#  output: 
#    "{tissue}/snapFiles/{tissue}.snap"
#  input:
#    snapList="{tissue}/snapFiles/{tissue}.snap.list",
#    snapFiles=lambda wildcards: expand("{{tissue}}/snapFiles/{sample}.snap",sample=tissues_dict[wildcards.tissue]),
#  threads: 1
#  params:
#    pbsName=lambda wildcards: wildcards.tissue,
#  shell:
#    '''Rscript snapATAC.pre.merged.R -i {input.snapList} \
#    --fragment_num 500 \
#    --mito_ratio 0.2 \
#    --dup_ratio 0.5 \
#    --umap_ratio 0.8 \
#    --pair_ratio 0.7 \
#    --bin_size 5000 \
#    --pc_num 50 \
#    --black_list mm10.blacklist.bed.gz \
#    --cpu 5 \
#    -o $path/snapFiles/$tissue.pool.snapATAC
#    '''


rule create_snap_list:
  output:
    "{tissue}/snapFiles/{tissue}.snap.list"
  input:
    snapFiles=lambda wildcards: expand(wildcards.tissue+"/snapFiles/{sample}.snap",sample=tissues_dict[wildcards.tissue]),
  threads: 1
  params:
    pbsName=lambda wildcards: wildcards.tissue,
    samples=lambda wildcards: " ".join(tissues_dict[wildcards.tissue])
  shell: 
    '''for sample in {params.samples}; do echo -e "$sample\t$sample.snap" >> {output};done
    '''


rule snap_add_mat:
  output:
    bmat = "{tissue}/snapFiles/{sample}.bmat",
    gmat = "{tissue}/snapFiles/{sample}.gmat"
  input:
    "{tissue}/snapFiles/{sample}.snap",
  threads: 1
  params:
      pbsName=lambda wildcards: wildcards.sample
  shell:
    '''source activate py27 && \
      snaptools snap-add-bmat  \
        --snap-file={input}  \
        --bin-size-list 1000 5000 10000  \
        --verbose=True && 
      snaptools snap-add-gmat  \
        --snap-file={input}  \
        --gene-file=../../scripts/snapATAC/gencode.vM16.gene.bed  \
        --verbose=True
    '''



rule snap_pre:
  output:
    snap="{tissue}/snapFiles/{sample}.snap",
  input:
    "../../data/snATAC/bam.filter.nsort/{sample}/{sample}.filter.nsort.bam"
  threads: 1
  params:
    pbsName=lambda wildcards: wildcards.sample
  shell:
    """source activate py27 && \
  snaptools snap-pre  \
    --input-file={input}  \
    --output-snap={output.snap} \
    --genome-name=mm10  \
    --genome-size=../../scripts/snapATAC/mm10.chrom.sizes  \
    --min-mapq=0  \
    --min-flen=0  \
    --max-flen=1000  \
    --keep-chrm=TRUE  \
    --keep-single=TRUE  \
    --keep-secondary=False  \
    --overwrite=True  \
    --min-cov=100  \
    --verbose=True && \
  snaptools snap-add-bmat  \
    --snap-file={output.snap}  \
    --bin-size-list 1000 5000 10000  \
    --verbose=True &&
  snaptools snap-add-gmat  \
    --snap-file={output.snap}  \
    --gene-file=../../scripts/snapATAC/gencode.vM16.gene.bed  \
    --verbose=True
  """


