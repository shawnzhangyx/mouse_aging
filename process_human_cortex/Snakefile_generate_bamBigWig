#! /usr/bin/env bash
## Snakefile
####################
import pandas as pd
import numpy as np

workdir: workflow.basedir + "/../../analysis/human_cortex/"

ruleorder: sort_bam > merge_bam_cluster >  merge_bam_cluster_age #> split_bam_file

def get_rank(tissue): 
  f = pd.read_table(tissue+"/"+tissue+".pool.barcode.meta_info.txt")
  return np.max(f['cluster'])

tissues=["FC"]
#tissues=["FC"]
AGE_REPS=["30y.rep1","90y.rep1","30y.rep2"]
AGES = ["30y","90y"]
REPS = ["rep1","rep2"]

ranks = {tissue:get_rank(tissue) for tissue in tissues}

print(ranks)

localrules: require_files

rule require_files: 
  input:
    expand("{tissue}/bigWig.cluster/{tissue}.bw.xml",tissue=tissues),
#    expand("{tissue}/bigWig.cluster_age/{tissue}.bw.xml",tissue=tissues),
    expand("{tissue}/bigWig.cluster_age_rep/{tissue}.bw.xml",tissue=tissues),
    expand("{tissue}/{tissue}.peaks.counts",tissue=tissues),
#    expand("{tissue}/{tissue}.promoters.counts",tissue=tissues)



rule count_reads:
  output:
    "{tissue}/{tissue}.peaks.counts"
  input:
#    dynamic(expand("{{tissue}}/bam.cluster_age_rep/{{tissue}}.metacell_{{rank}}.{age}.{rep}.sorted.bam", age=AGES,rep=REPS))
    lambda wildcards: expand(wildcards.tissue+"/bam.cluster_age_rep/"+
    wildcards.tissue+".metacell_{rank}.{age_rep}.sorted.bam",
    rank=list(range(1,ranks[wildcards.tissue]+1)),age_rep=AGE_REPS)
  threads: 8
  params:
    pbsName=lambda wildcards: wildcards.tissue
  shell:
    "featureCounts -a ../../data/human_cortex/peaks/{wildcards.tissue}_summits.ext1k.saf -o {output} {input} -F SAF -T {threads} -O "


rule count_reads_prom:
  output:
    "{tissue}/{tissue}.promoters.counts"
  input:
#    dynamic(expand("{{tissue}}/bam.cluster_age_rep/{{tissue}}.metacell_{{rank}}.{age}.{rep}.sorted.bam", age=AGES,rep=REPS))
    lambda wildcards: expand(wildcards.tissue+"/bam.cluster_age_rep/"+
    wildcards.tissue+".metacell_{rank}.{age_rep}.sorted.bam",
    rank=list(range(1,ranks[wildcards.tissue]+1)),age_rep=AGE_REPS)
  threads: 8
  params:
    pbsName=lambda wildcards: wildcards.tissue
  shell:
    "featureCounts -a /projects/ps-renlab/yanxiao/annotations/mm10/gencode.vM10.annotation.gene.tss1k.saf -o {output} {input} -F SAF -T {threads} -O "



rule generate_bw_cluster_xml:
  output: 
    "{tissue}/bigWig.cluster/{tissue}.bw.xml"
  input:
    lambda wildcards: expand(wildcards.tissue+"/bigWig.cluster/"+
    wildcards.tissue+".metacell_{rank}.sorted.rpkm.bw",
    rank=list(range(1,ranks[wildcards.tissue]+1)))
  threads: 1
  params:
    pbsName=lambda wildcards: wildcards.tissue
  shell:
    "cd {wildcards.tissue}/bigWig.cluster/ &&"
    "python ~/software/github/seq-min-scripts/make_IGV_session.py hg38 "
    "http://renlab.sdsc.edu/yanxiao/mouse_aging/analysis/human_cortex/{wildcards.tissue}/"
    "bigWig.cluster {wildcards.tissue}.bw.xml"

rule generate_bw_cluster_age_xml:
  output:
    "{tissue}/bigWig.cluster_age/{tissue}.bw.xml"
  input:
    lambda wildcards: expand(wildcards.tissue+"/bigWig.cluster_age/"+
    wildcards.tissue+".metacell_{rank}.{age}.sorted.rpkm.bw",
    rank=list(range(1,ranks[wildcards.tissue]+1)),age=AGES)
  threads: 1
  params:
    pbsName=lambda wildcards: wildcards.tissue
  shell:
    "cd {wildcards.tissue}/bigWig.cluster_age/ &&"
    "python ~/software/github/seq-min-scripts/make_IGV_session.py hg38 "
    "http://renlab.sdsc.edu/yanxiao/mouse_aging/analysis/human_cortex/{wildcards.tissue}/"
    "bigWig.cluster_age {wildcards.tissue}.bw.xml"

rule generate_bw_cluster_age_rep_xml:
  output:
    "{tissue}/bigWig.cluster_age_rep/{tissue}.bw.xml"
  input:
    lambda wildcards: expand(wildcards.tissue+"/bigWig.cluster_age_rep/"+
    wildcards.tissue+".metacell_{rank}.{age_rep}.sorted.rpkm.bw",
    rank=list(range(1,ranks[wildcards.tissue]+1)),age_rep=AGE_REPS)
  threads: 1
  params:
    pbsName=lambda wildcards: wildcards.tissue
  shell:
    "cd {wildcards.tissue}/bigWig.cluster_age_rep/ &&"
    "python ~/software/github/seq-min-scripts/make_IGV_session.py hg38"
    "http://renlab.sdsc.edu/yanxiao/mouse_aging/analysis/human_cortex/{wildcards.tissue}/"
    "bigWig.cluster_age_rep {wildcards.tissue}.bw.xml"




rule bamToBigWig:
  output: 
    "{tissue}/bigWig.{path}/{tissue}.metacell_{info}.sorted.rpkm.bw"
  input:
    "{tissue}/bam.{path}/{tissue}.metacell_{info}.sorted.bam"
  threads: 4
  params:
    pbsName=lambda wildcards: wildcards.info
  shell:
    "bamCoverage --bam {input} --outFileFormat bigwig --outFileName {output} "
    "--binSize 25 --normalizeUsing RPKM -p {threads}"


rule sort_bam:
  output: 
    bam="{tissue}/{bam_dir}/{tissue}.metacell_{ext}.sorted.bam",
    bai="{tissue}/{bam_dir}/{tissue}.metacell_{ext}.sorted.bam.bai"
  input:
    "{tissue}/{bam_dir}/{tissue}.metacell_{ext}.bam"
  threads: 1
  params:
    pbsName=lambda wildcards: wildcards.tissue+"."+wildcards.ext
  shell:
    "samtools sort -m 4G {input} -o {output.bam};"
    "samtools index {output.bam};"

rule merge_bam_cluster:
  output:
    "{tissue}/bam.cluster/{tissue}.metacell_{cluster}.bam"
  input: 
    expand("{{tissue}}/bam.cluster_age_rep/{{tissue}}.metacell_{{cluster}}.{age_rep}.bam",age_rep=AGE_REPS)
  threads: 1
  params:
    pbsName=lambda wildcards: wildcards.tissue+"."+wildcards.cluster
  shell: 
    "samtools merge -f {output} {input}"

rule merge_bam_cluster_age:
  output:
    "{tissue}/bam.cluster_age/{tissue}.metacell_{cluster}.{age}.bam"
  input:
    expand("{{tissue}}/bam.cluster_age_rep/{{tissue}}.metacell_{{cluster}}.{{age}}.{rep}.bam",rep=REPS)
  threads: 1
  params:
    pbsName=lambda wildcards: wildcards.tissue+"."+wildcards.age
  shell:
    "samtools merge -f {output} {input}"




